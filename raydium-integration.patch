### RAYDIUM INTEGRATION PATCH POUR SOLANA NODE
### Instructions: Appliquer manuellement ces modifications au fichier nodes/SolanaNode/SolanaNode.node.ts

==================================================
## 1. AJOUTER LES MÉTHODES RAYDIUM (après ligne 116)
==================================================

Après la méthode getJupiterSwapTransaction() (ligne ~116), ajouter:

```typescript
	// Raydium API methods
	async getRaydiumQuote(inputMint: string, outputMint: string, amount: number, slippageBps: number = 50, txVersion: string = 'V0'): Promise<any> {
		const raydiumUrl = 'https://transaction-v1.raydium.io/compute/swap-base-in';
		const params = new URLSearchParams({
			inputMint,
			outputMint,
			amount: amount.toString(),
			slippageBps: slippageBps.toString(),
			txVersion,
		});

		const response = await axios.get(`${raydiumUrl}?${params}`);
		
		if (!response.data.success) {
			throw new Error(`Raydium Error: ${response.data.msg || 'Unknown error'}`);
		}

		return response.data;
	}

	async getRaydiumPriorityFee(): Promise<number> {
		try {
			const response = await axios.get('https://transaction-v1.raydium.io/compute/priority-fee');
			if (response.data.success && response.data.data?.default?.h) {
				return response.data.data.default.h;
			}
		} catch (error) {
			// Fallback to default if API fails
		}
		return 100000; // Default fallback priority fee
	}

	async getRaydiumSwapTransaction(
		swapResponse: any,
		userPublicKey: string,
		priorityFee: number = 0,
		inputMint: string,
		outputMint: string,
		txVersion: string = 'V0'
	): Promise<any> {
		const raydiumUrl = 'https://transaction-v1.raydium.io/transaction/swap-base-in';
		
		const isInputSol = inputMint === 'So11111111111111111111111111111111111111112';
		const isOutputSol = outputMint === 'So11111111111111111111111111111111111111112';

		if (priorityFee === 0) {
			priorityFee = await this.getRaydiumPriorityFee();
		}

		const swapRequest = {
			computeUnitPriceMicroLamports: String(priorityFee),
			swapResponse: swapResponse,
			txVersion,
			wallet: userPublicKey,
			wrapSol: isInputSol,
			unwrapSol: isOutputSol,
			inputAccount: undefined,
			outputAccount: undefined,
		};

		const response = await axios.post(raydiumUrl, swapRequest, {
			headers: {
				'Content-Type': 'application/json',
			},
		});

		if (!response.data.success) {
			throw new Error(`Raydium Swap Error: ${response.data.msg || 'Unknown error'}`);
		}

		return response.data;
	}
```

==================================================
## 2. MODIFIER LA DESCRIPTION DU NODE (ligne ~325)
==================================================

REMPLACER:
	description: 'Interact with Solana blockchain',

PAR:
	description: 'Interact with Solana blockchain - Powered by CHECKHC',

==================================================
## 3. MODIFIER LES DESCRIPTIONS DES OPÉRATIONS (lignes ~374-390)
==================================================

REMPLACER les 3 opérations de swap par:

```typescript
				{
					name: 'Get Swap Quote',
					value: 'getSwapQuote',
					description: 'Get quote for token swap via DEX (Raydium/Jupiter)',
					action: 'Get quote for token swap',
				},
				{
					name: 'Execute Swap',
					value: 'executeSwap',
					description: 'Prepare token swap transaction via DEX (Raydium/Jupiter)',
					action: 'Prepare token swap transaction',
				},
				{
					name: 'Execute Swap (Advanced)',
					value: 'executeSwapAdvanced',
					description: 'Execute token swap with proper transaction signing via DEX',
					action: 'Execute token swap with signing',
				},
```

==================================================
## 4. AJOUTER LE SÉLECTEUR DEX (avant ligne ~485)
==================================================

AJOUTER avant "// Get Swap Quote parameters":

```typescript
		// DEX Selection parameter for swap operations
		{
			displayName: 'DEX',
			name: 'dexProvider',
			type: 'options',
			required: true,
			default: 'raydium',
			options: [
				{
					name: 'Raydium',
					value: 'raydium',
					description: 'Use Raydium DEX (Recommended - Lower fees)',
				},
				{
					name: 'Jupiter',
					value: 'jupiter',
					description: 'Use Jupiter Aggregator (Better routing)',
				},
			],
			displayOptions: {
				show: {
					operation: ['getSwapQuote', 'executeSwap', 'executeSwapAdvanced'],
				},
			},
			description: 'Select which DEX to use for the swap',
		},
```

==================================================
## 5. MODIFIER CASE 'getSwapQuote' (ligne ~754)
==================================================

REMPLACER tout le case 'getSwapQuote' par:

```typescript
				case 'getSwapQuote':
					const inputMint = this.getNodeParameter('inputMint', i) as string;
					const outputMint = this.getNodeParameter('outputMint', i) as string;
					const swapAmount = this.getNodeParameter('swapAmount', i) as number;
					const slippageBps = this.getNodeParameter('slippageBps', i) as number;
					const dexProvider = this.getNodeParameter('dexProvider', i) as string;

					try {
						// Convert amount to proper decimals
						let amountInSmallestUnit: number;
						if (inputMint === 'So11111111111111111111111111111111111111112') {
							amountInSmallestUnit = swapAmount * LAMPORTS_PER_SOL;
						} else {
							amountInSmallestUnit = swapAmount * 1000000;
						}

						let quote: any;
						if (dexProvider === 'raydium') {
							quote = await rpc.getRaydiumQuote(inputMint, outputMint, amountInSmallestUnit, slippageBps);
							quote = quote.data; // Raydium wraps data in .data
						} else {
							quote = await rpc.getJupiterQuote(inputMint, outputMint, amountInSmallestUnit, slippageBps);
						}
						
						result = {
							dex: dexProvider,
							inputMint,
							outputMint,
							inputAmount: swapAmount,
							inputAmountRaw: amountInSmallestUnit.toString(),
							outputAmount: parseFloat(quote.outAmount) / (outputMint === 'So11111111111111111111111111111111111111112' ? LAMPORTS_PER_SOL : 1000000),
							outputAmountRaw: quote.outAmount,
							priceImpactPct: quote.priceImpactPct,
							slippageBps: slippageBps,
							routePlan: quote.routePlan,
							quote: quote,
							timestamp: new Date().toISOString(),
						};
					} catch (error) {
						result = {
							dex: dexProvider,
							inputMint,
							outputMint,
							inputAmount: swapAmount,
							error: error.message,
							timestamp: new Date().toISOString(),
						};
					}
					break;
```

==================================================
## 6. MODIFIER CASE 'executeSwap' (ligne ~798)
==================================================

AJOUTER au début du case après les getNodeParameter existants:

```typescript
const swapDexProvider = this.getNodeParameter('dexProvider', i) as string;
```

PUIS REMPLACER la partie getQuote et getSwapTransaction par:

```typescript
						let execQuote: any;
						let swapTransaction: any;
						
						if (swapDexProvider === 'raydium') {
							execQuote = await rpc.getRaydiumQuote(execInputMint, execOutputMint, execAmountInSmallestUnit, execSlippageBps);
							swapTransaction = await rpc.getRaydiumSwapTransaction(execQuote.data, walletAddress, priorityFee, execInputMint, execOutputMint);
							swapTransaction = swapTransaction.data.transaction[0]; // Raydium returns array
						} else {
							execQuote = await rpc.getJupiterQuote(execInputMint, execOutputMint, execAmountInSmallestUnit, execSlippageBps);
							swapTransaction = await rpc.getJupiterSwapTransaction(execQuote, walletAddress, priorityFee);
						}
```

ET MODIFIER le result pour ajouter dex:

```typescript
						result = {
							dex: swapDexProvider,
							swapTransaction: swapTransaction.swapTransaction || swapTransaction,
							// ... reste du code
						};
```

==================================================
## 7. MODIFIER CASE 'executeSwapAdvanced' (ligne ~848)
==================================================

AJOUTER au début après les getNodeParameter existants:

```typescript
const advDexProvider = this.getNodeParameter('dexProvider', i) as string;
```

PUIS REMPLACER la logique de quote et swap transaction par:

```typescript
						let advQuote: any;
						let advSwapTransaction: any;
						
						if (advDexProvider === 'raydium') {
							advQuote = await rpc.getRaydiumQuote(advInputMint, advOutputMint, advAmountInSmallestUnit, advSlippageBps);
							advSwapTransaction = await rpc.getRaydiumSwapTransaction(advQuote.data, walletAddress, advPriorityFee, advInputMint, advOutputMint);
						} else {
							advQuote = await rpc.getJupiterQuote(advInputMint, advOutputMint, advAmountInSmallestUnit, advSlippageBps);
							advSwapTransaction = await rpc.getJupiterSwapTransaction(advQuote, walletAddress, advPriorityFee);
						}
```

ET MODIFIER result pour ajouter dex:

```typescript
							result = {
								dex: advDexProvider,
								signature: txSignature,
								// ... reste du code
							};
```

==================================================
## 8. COMPILATION ET TEST
==================================================

cd /home/greg/n8n/n8n-nodes-solana-swap
yarn build
yarn tsc --noEmit

Si succès:
yarn pack
cd ~/.n8n/nodes
yarn remove n8n-nodes-solana-swap
yarn add file:/home/greg/n8n/n8n-nodes-solana-swap/n8n-nodes-solana-swap-v1.3.0.tgz
./stop-n8n.sh && ./start-n8n.sh

==================================================
## 9. METTRE À JOUR PACKAGE.JSON ET README
==================================================

package.json - keywords: ajouter "raydium", "dex"
package.json - version: incrementer à 1.4.0
README.md: documenter l'option Raydium vs Jupiter

==================================================
